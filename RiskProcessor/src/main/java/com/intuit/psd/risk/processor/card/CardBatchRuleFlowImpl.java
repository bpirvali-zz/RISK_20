package com.intuit.psd.risk.processor.card;import java.util.ArrayList;import java.util.List;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.intuit.psd.risk.interfaces.BusinessObjectModel;import com.intuit.psd.risk.processor.RuleFlowType;import com.intuit.psd.risk.processor.RuleProcessor;import com.intuit.psd.risk.processor.RulesEngine;import com.intuit.psd.risk.processor.exceptions.RiskException;/** *  * @author asookazian *  *  */public class CardBatchRuleFlowImpl implements RuleProcessor {    private static Logger logger = LoggerFactory	    .getLogger(CardBatchRuleFlowImpl.class);        private RulesEngine rulesEngine;        /**     *      * Processes the rules in rules engine.     *      * @param bom     *      * @throws     */    public void processRules(BusinessObjectModel bom)	    throws RiskException {    			CardBatchBOMImpl cardBatchBOM = null;		if (bom != null) {		    cardBatchBOM = (CardBatchBOMImpl) bom;		} else {		    throw new RiskException("BOM is null!");			}		List<ViolationAlert> alerts = new ArrayList<ViolationAlert>();		cardBatchBOM.setViolationAlerts(alerts);		logger.info("about to invoke rules engine");				rulesEngine.processRules(bom, RuleFlowType.CARD_BATCH);				alerts = cardBatchBOM.getViolationAlerts();			    for (ViolationAlert alert : alerts) {	    	// TODO:BP: PATCH: this needs to be changed when Ross changes the blaze code	    	// so it's not hard-coded to "123" for merchant account #	    	alert.setMerchantAccountNumber(cardBatchBOM.getAccountNumber());	    				logger.info("");			logger.info("-- VIOLATION ALERT --");			logger.info("accountNumber " + cardBatchBOM.getAccountNumber());			logger.info("batchCycleDate" + cardBatchBOM.getBatchCycleDate().toString());			logger.info("alertType " + alert.getAlertType());			logger.info("batchCycleDate " + alert.getBatchCycleDate().toString());			logger.info("merchantAccountNumber " + alert.getMerchantAccountNumber());			logger.info("ruleVersionId " + alert.getRuleVersionId());			logger.info("violatedRuleActualValue " + alert.getViolatedRuleActualValue());			logger.info("violatedRuleDescription " + alert.getViolatedRuleDescription());			logger.info("violatedRuleName " + alert.getViolatedRuleName());			logger.info("violatedRuleSet " + alert.getViolatedRuleSet());			logger.info("violationLevel " + alert.getViolationLevel());			logger.info("alert.alertStatus " + alert.getAlertStatus());			logger.info("alert.workQueueCategory " + alert.getWorkQueueCategory());			logger.info("alert.decision " + alert.getDecision());			logger.info("alertDate " + alert.getAlertDate());	    }		logger.info("call to rules engine complete");    }	public RulesEngine getRulesEngine() {		return rulesEngine;	}	public void setRulesEngine(RulesEngine rulesEngine) {		this.rulesEngine = rulesEngine;	}}