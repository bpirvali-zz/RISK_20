package com.intuit.psd.risk.processor.card;

import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.List;import org.easymock.EasyMock;import org.easymock.IAnswer;import org.testng.Assert;import org.testng.annotations.Test;import com.intuit.psd.risk.interfaces.BusinessObjectModel;import com.intuit.psd.risk.processor.RuleFlowType;import com.intuit.psd.risk.processor.RulesEngine;import com.intuit.psd.risk.processor.exceptions.RiskException;

public class CardBatchRuleFlowImplTest {		static List<ViolationAlert> alerts = new ArrayList<ViolationAlert>();
	@Test	public void processRulesHappyPath() throws ParseException {		// mock rules engine		RulesEngine rulesEngine = EasyMock.createMock(RulesEngine.class);					ViolationAlert violationAlert = new ViolationAlert();				SimpleDateFormat dateFormat = new SimpleDateFormat("M/d/yyyy");  	  	java.util.Date myDate = dateFormat.parse("08/08/2012");  	  			violationAlert.setViolatedRuleName("test rule name");		violationAlert.setViolatedRuleSet("test ruleset");		violationAlert.setViolatedRuleActualValue("test ruleactualvalue");		violationAlert.setViolatedRuleDescription("test violationruledescription");    	violationAlert.setAlertDate(myDate);    	violationAlert.setBatchCycleDate(myDate);    	violationAlert.setMerchantAccountNumber("1234567890123456");    	violationAlert.setCaseType("test casetype");    	violationAlert.setAlertType("test alerttype");    	violationAlert.setViolationLevel("test violationlevel");    	violationAlert.setRuleVersionId("test ruleversionid");    	violationAlert.setAlertStatus("test alertstatus");    	violationAlert.setWorkQueueCategory("test workqueuecategory");    	violationAlert.setDecision("test decision");    	alerts.add(violationAlert);    	    	// register the expected method    	rulesEngine.processRules(EasyMock.anyObject(BusinessObjectModel.class), EasyMock.anyObject(RuleFlowType.class));    	EasyMock.expectLastCall().andAnswer(new IAnswer<Object>() {    	    @Override    	    public Object answer() throws Throwable {    	        ((CardBatchBOMImpl) EasyMock.getCurrentArguments()[0]).setViolationAlerts(alerts);    	        return null; // required to be null for a void method    	    }    	});   							CardBatchRuleFlowImpl cardBatchRuleFlowImpl = new CardBatchRuleFlowImpl();		cardBatchRuleFlowImpl.setRulesEngine(rulesEngine);		CardBatchBOMImpl cardBatchBOMImpl = new CardBatchBOMImpl();    			cardBatchBOMImpl.setAccountNumber("1234567890123456");					java.util.Date batchDate = null;		try {			batchDate = dateFormat.parse("08/08/2012");		}		catch(Exception e) {			Assert.fail("Exception encountered");		}		cardBatchBOMImpl.setBatchCycleDate(batchDate);							EasyMock.replay(rulesEngine);		cardBatchRuleFlowImpl.processRules(cardBatchBOMImpl);       			Assert.assertEquals("1234567890123456",cardBatchBOMImpl.getViolationAlerts().get(0).getMerchantAccountNumber());		Assert.assertEquals( "test rule name",cardBatchBOMImpl.getViolationAlerts().get(0).getViolatedRuleName());    	Assert.assertEquals("test ruleset",(cardBatchBOMImpl.getViolationAlerts().get(0).getViolatedRuleSet()));    	Assert.assertEquals( "test ruleactualvalue",cardBatchBOMImpl.getViolationAlerts().get(0).getViolatedRuleActualValue());    	Assert.assertEquals("test violationruledescription",cardBatchBOMImpl.getViolationAlerts().get(0).getViolatedRuleDescription());    	Assert.assertEquals(myDate.getTime(),cardBatchBOMImpl.getViolationAlerts().get(0).getBatchCycleDate().getTime());         Assert.assertEquals(myDate.getTime(),cardBatchBOMImpl.getViolationAlerts().get(0).getAlertDate().getTime());        	Assert.assertEquals("test casetype",cardBatchBOMImpl.getViolationAlerts().get(0).getCaseType());    	Assert.assertEquals("test alerttype",cardBatchBOMImpl.getViolationAlerts().get(0).getAlertType());    	Assert.assertEquals("test violationlevel",cardBatchBOMImpl.getViolationAlerts().get(0).getViolationLevel());    	Assert.assertEquals("test ruleversionid",cardBatchBOMImpl.getViolationAlerts().get(0).getRuleVersionId());    	Assert.assertEquals("test alertstatus",cardBatchBOMImpl.getViolationAlerts().get(0).getAlertStatus() );    	Assert.assertEquals("test workqueuecategory",cardBatchBOMImpl.getViolationAlerts().get(0).getWorkQueueCategory());    	Assert.assertEquals("test decision",cardBatchBOMImpl.getViolationAlerts().get(0).getDecision());				EasyMock.verify(rulesEngine);	    
	}
	@Test(expectedExceptions = RiskException.class)	public void processRulesBadBOM() {		CardBatchRuleFlowImpl cardBatchRuleFlowImpl = new CardBatchRuleFlowImpl();		cardBatchRuleFlowImpl.processRules(null);	}
}
